// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name
// @generated from protobuf file "proto/user.api.proto" (package "example", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message example.User
 */
export interface User {
    /**
     * id字段
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint; // @gotags: json:"id"
    /**
     * 名称
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string; // @gotags: json:"name"
    /**
     * 年龄
     *
     * @generated from protobuf field: int64 age = 3;
     */
    age: bigint; // @gotags: json:"age"
    /**
     * 创建时间
     *
     * @generated from protobuf field: string ctime = 4;
     */
    ctime: string; // @gotags: json:"ctime"
    /**
     * 更新时间
     *
     * @generated from protobuf field: string mtime = 5;
     */
    mtime: string; // @gotags: json:"mtime"  
}
/**
 * @generated from protobuf message example.UserId
 */
export interface UserId {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint; // @gotags: form:"id"
}
/**
 * @generated from protobuf message example.UpdateUserReq
 */
export interface UpdateUserReq {
    /**
     * @generated from protobuf field: example.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: repeated string update_mask = 2;
     */
    update_mask: string[];
}
/**
 * @generated from protobuf message example.ListUsersReq
 */
export interface ListUsersReq {
    /**
     * number of page
     *
     * @generated from protobuf field: int32 page = 1;
     */
    page: number; // @gotags: form:"page"
    /**
     * default 20
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    page_size: number; // @gotags: form:"page_size"
    /**
     * order by field
     *
     * @generated from protobuf field: example.UserField order_by_field = 3;
     */
    order_by_field: UserField; // @gotags: form:"order_by_field"
    /**
     * ASC DESC
     *
     * @generated from protobuf field: bool order_by_desc = 4;
     */
    order_by_desc: boolean; // @gotags: form:"order_by_desc"
    /**
     * filter
     *
     * @generated from protobuf field: repeated example.UserFilter filters = 5;
     */
    filters: UserFilter[]; // @gotags: form:"filters"
}
/**
 * @generated from protobuf message example.UserFilter
 */
export interface UserFilter {
    /**
     * @generated from protobuf field: example.UserField field = 1;
     */
    field: UserField;
    /**
     * @generated from protobuf field: string op = 2;
     */
    op: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message example.ListUsersResp
 */
export interface ListUsersResp {
    /**
     * @generated from protobuf field: repeated example.User users = 1;
     */
    users: User[]; // @gotags: json:"users"
    /**
     * @generated from protobuf field: int32 total_count = 2;
     */
    total_count: number; // @gotags: json:"total_count"
    /**
     * @generated from protobuf field: int32 page_count = 3;
     */
    page_count: number; // @gotags: json:"page_count"
}
/**
 * @generated from protobuf enum example.UserField
 */
export enum UserField {
    /**
     * @generated from protobuf enum value: User_unknow = 0;
     */
    User_unknow = 0,
    /**
     * @generated from protobuf enum value: User_id = 1;
     */
    User_id = 1,
    /**
     * @generated from protobuf enum value: User_name = 2;
     */
    User_name = 2,
    /**
     * @generated from protobuf enum value: User_age = 3;
     */
    User_age = 3,
    /**
     * @generated from protobuf enum value: User_ctime = 4;
     */
    User_ctime = 4,
    /**
     * @generated from protobuf enum value: User_mtime = 5;
     */
    User_mtime = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("example.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "age", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "ctime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { id: 0n, name: "", age: 0n, ctime: "", mtime: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 age */ 3:
                    message.age = reader.int64().toBigInt();
                    break;
                case /* string ctime */ 4:
                    message.ctime = reader.string();
                    break;
                case /* string mtime */ 5:
                    message.mtime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 age = 3; */
        if (message.age !== 0n)
            writer.tag(3, WireType.Varint).int64(message.age);
        /* string ctime = 4; */
        if (message.ctime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ctime);
        /* string mtime = 5; */
        if (message.mtime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mtime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserId$Type extends MessageType<UserId> {
    constructor() {
        super("example.UserId", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UserId>): UserId {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserId): UserId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.UserId
 */
export const UserId = new UserId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserReq$Type extends MessageType<UpdateUserReq> {
    constructor() {
        super("example.UpdateUserReq", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "update_mask", kind: "scalar", localName: "update_mask", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserReq>): UpdateUserReq {
        const message = { update_mask: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserReq): UpdateUserReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* example.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated string update_mask */ 2:
                    message.update_mask.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* example.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string update_mask = 2; */
        for (let i = 0; i < message.update_mask.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.update_mask[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.UpdateUserReq
 */
export const UpdateUserReq = new UpdateUserReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersReq$Type extends MessageType<ListUsersReq> {
    constructor() {
        super("example.ListUsersReq", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", localName: "page_size", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "order_by_field", kind: "enum", localName: "order_by_field", T: () => ["example.UserField", UserField] },
            { no: 4, name: "order_by_desc", kind: "scalar", localName: "order_by_desc", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserFilter }
        ]);
    }
    create(value?: PartialMessage<ListUsersReq>): ListUsersReq {
        const message = { page: 0, page_size: 0, order_by_field: 0, order_by_desc: false, filters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUsersReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersReq): ListUsersReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 page_size */ 2:
                    message.page_size = reader.int32();
                    break;
                case /* example.UserField order_by_field */ 3:
                    message.order_by_field = reader.int32();
                    break;
                case /* bool order_by_desc */ 4:
                    message.order_by_desc = reader.bool();
                    break;
                case /* repeated example.UserFilter filters */ 5:
                    message.filters.push(UserFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsersReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 page_size = 2; */
        if (message.page_size !== 0)
            writer.tag(2, WireType.Varint).int32(message.page_size);
        /* example.UserField order_by_field = 3; */
        if (message.order_by_field !== 0)
            writer.tag(3, WireType.Varint).int32(message.order_by_field);
        /* bool order_by_desc = 4; */
        if (message.order_by_desc !== false)
            writer.tag(4, WireType.Varint).bool(message.order_by_desc);
        /* repeated example.UserFilter filters = 5; */
        for (let i = 0; i < message.filters.length; i++)
            UserFilter.internalBinaryWrite(message.filters[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.ListUsersReq
 */
export const ListUsersReq = new ListUsersReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserFilter$Type extends MessageType<UserFilter> {
    constructor() {
        super("example.UserFilter", [
            { no: 1, name: "field", kind: "enum", T: () => ["example.UserField", UserField] },
            { no: 2, name: "op", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserFilter>): UserFilter {
        const message = { field: 0, op: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserFilter): UserFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* example.UserField field */ 1:
                    message.field = reader.int32();
                    break;
                case /* string op */ 2:
                    message.op = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* example.UserField field = 1; */
        if (message.field !== 0)
            writer.tag(1, WireType.Varint).int32(message.field);
        /* string op = 2; */
        if (message.op !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.op);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.UserFilter
 */
export const UserFilter = new UserFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersResp$Type extends MessageType<ListUsersResp> {
    constructor() {
        super("example.ListUsersResp", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 2, name: "total_count", kind: "scalar", localName: "total_count", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_count", kind: "scalar", localName: "page_count", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsersResp>): ListUsersResp {
        const message = { users: [], total_count: 0, page_count: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUsersResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersResp): ListUsersResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated example.User users */ 1:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 total_count */ 2:
                    message.total_count = reader.int32();
                    break;
                case /* int32 page_count */ 3:
                    message.page_count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsersResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated example.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 total_count = 2; */
        if (message.total_count !== 0)
            writer.tag(2, WireType.Varint).int32(message.total_count);
        /* int32 page_count = 3; */
        if (message.page_count !== 0)
            writer.tag(3, WireType.Varint).int32(message.page_count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.ListUsersResp
 */
export const ListUsersResp = new ListUsersResp$Type();
/**
 * @generated ServiceType for protobuf service example.UserService
 */
export const UserService = new ServiceType("example.UserService", [
    { name: "CreateUser", options: {}, I: User, O: User },
    { name: "DeleteUser", options: {}, I: UserId, O: Empty },
    { name: "UpdateUser", options: {}, I: UpdateUserReq, O: User },
    { name: "GetUser", options: {}, I: UserId, O: User },
    { name: "ListUsers", options: {}, I: ListUsersReq, O: ListUsersResp }
]);
