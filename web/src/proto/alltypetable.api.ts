// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name
// @generated from protobuf file "proto/alltypetable.api.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message AllTypeTable
 */
export interface AllTypeTable {
    /**
     * 自增id
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint; // @gotags: json:"id"
    /**
     * 小小整型
     *
     * @generated from protobuf field: int64 t_int = 2;
     */
    t_int: bigint; // @gotags: json:"t_int"
    /**
     * 小整数
     *
     * @generated from protobuf field: int64 s_int = 3;
     */
    s_int: bigint; // @gotags: json:"s_int"
    /**
     * 中整数
     *
     * @generated from protobuf field: int64 m_int = 4;
     */
    m_int: bigint; // @gotags: json:"m_int"
    /**
     * 大整数
     *
     * @generated from protobuf field: int64 b_int = 5;
     */
    b_int: bigint; // @gotags: json:"b_int"
    /**
     * 小浮点
     *
     * @generated from protobuf field: float f32 = 6;
     */
    f32: number; // @gotags: json:"f32"
    /**
     * 大浮点
     *
     * @generated from protobuf field: double f64 = 7;
     */
    f64: number; // @gotags: json:"f64"
    /**
     * @generated from protobuf field: double decimal_mysql = 8;
     */
    decimal_mysql: number; // @gotags: json:"decimal_mysql"
    /**
     * @generated from protobuf field: string char_m = 9;
     */
    char_m: string; // @gotags: json:"char_m"
    /**
     * @generated from protobuf field: string varchar_m = 10;
     */
    varchar_m: string; // @gotags: json:"varchar_m"
    /**
     * @generated from protobuf field: string json_m = 11;
     */
    json_m: string; // @gotags: json:"json_m"
    /**
     * @generated from protobuf field: string nvarchar_m = 12;
     */
    nvarchar_m: string; // @gotags: json:"nvarchar_m"
    /**
     * @generated from protobuf field: string nchar_m = 13;
     */
    nchar_m: string; // @gotags: json:"nchar_m"
    /**
     * @generated from protobuf field: string time_m = 14;
     */
    time_m: string; // @gotags: json:"time_m"
    /**
     * @generated from protobuf field: string date_m = 15;
     */
    date_m: string; // @gotags: json:"date_m"
    /**
     * @generated from protobuf field: string data_time_m = 16;
     */
    data_time_m: string; // @gotags: json:"data_time_m"
    /**
     * 创建时间
     *
     * @generated from protobuf field: string timestamp_m = 17;
     */
    timestamp_m: string; // @gotags: json:"timestamp_m"
    /**
     * 更新时间
     *
     * @generated from protobuf field: string timestamp_update = 18;
     */
    timestamp_update: string; // @gotags: json:"timestamp_update"
    /**
     * 年
     *
     * @generated from protobuf field: string year_m = 19;
     */
    year_m: string; // @gotags: json:"year_m"
    /**
     * @generated from protobuf field: string t_text = 20;
     */
    t_text: string; // @gotags: json:"t_text"
    /**
     * @generated from protobuf field: string m_text = 21;
     */
    m_text: string; // @gotags: json:"m_text"
    /**
     * @generated from protobuf field: string text_m = 22;
     */
    text_m: string; // @gotags: json:"text_m"
    /**
     * @generated from protobuf field: string l_text = 23;
     */
    l_text: string; // @gotags: json:"l_text"
    /**
     * @generated from protobuf field: bytes binary_m = 24;
     */
    binary_m: Uint8Array; // @gotags: json:"binary_m"
    /**
     * @generated from protobuf field: bytes blob_m = 25;
     */
    blob_m: Uint8Array; // @gotags: json:"blob_m"
    /**
     * @generated from protobuf field: bytes l_blob = 26;
     */
    l_blob: Uint8Array; // @gotags: json:"l_blob"
    /**
     * @generated from protobuf field: bytes m_blob = 27;
     */
    m_blob: Uint8Array; // @gotags: json:"m_blob"
    /**
     * @generated from protobuf field: bytes t_blob = 28;
     */
    t_blob: Uint8Array; // @gotags: json:"t_blob"
    /**
     * @generated from protobuf field: bytes bit_m = 29;
     */
    bit_m: Uint8Array; // @gotags: json:"bit_m"
    /**
     * @generated from protobuf field: string enum_m = 30;
     */
    enum_m: string; // @gotags: json:"enum_m"
    /**
     * @generated from protobuf field: string set_m = 31;
     */
    set_m: string; // @gotags: json:"set_m"
    /**
     * @generated from protobuf field: int64 bool_m = 32;
     */
    bool_m: bigint; // @gotags: json:"bool_m"  
}
/**
 * @generated from protobuf message AllTypeTableId
 */
export interface AllTypeTableId {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint; // @gotags: form:"id"
}
/**
 * @generated from protobuf message UpdateAllTypeTableReq
 */
export interface UpdateAllTypeTableReq {
    /**
     * @generated from protobuf field: AllTypeTable all_type_table = 1;
     */
    all_type_table?: AllTypeTable;
    /**
     * @generated from protobuf field: repeated string update_mask = 2;
     */
    update_mask: string[];
}
/**
 * @generated from protobuf message ListAllTypeTablesReq
 */
export interface ListAllTypeTablesReq {
    /**
     * number of page
     *
     * @generated from protobuf field: int32 page = 1;
     */
    page: number; // @gotags: form:"page"
    /**
     * default 20
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    page_size: number; // @gotags: form:"page_size"
    /**
     * order by field
     *
     * @generated from protobuf field: AllTypeTableField order_by_field = 3;
     */
    order_by_field: AllTypeTableField; // @gotags: form:"order_by_field"
    /**
     * ASC DESC
     *
     * @generated from protobuf field: bool order_by_desc = 4;
     */
    order_by_desc: boolean; // @gotags: form:"order_by_desc"
    /**
     * filter
     *
     * @generated from protobuf field: repeated AllTypeTableFilter filters = 5;
     */
    filters: AllTypeTableFilter[]; // @gotags: form:"filters"
}
/**
 * @generated from protobuf message AllTypeTableFilter
 */
export interface AllTypeTableFilter {
    /**
     * @generated from protobuf field: AllTypeTableField field = 1;
     */
    field: AllTypeTableField;
    /**
     * @generated from protobuf field: string op = 2;
     */
    op: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message ListAllTypeTablesResp
 */
export interface ListAllTypeTablesResp {
    /**
     * @generated from protobuf field: repeated AllTypeTable all_type_tables = 1;
     */
    all_type_tables: AllTypeTable[]; // @gotags: json:"all_type_tables"
    /**
     * @generated from protobuf field: int32 total_count = 2;
     */
    total_count: number; // @gotags: json:"total_count"
    /**
     * @generated from protobuf field: int32 page_count = 3;
     */
    page_count: number; // @gotags: json:"page_count"
}
/**
 * @generated from protobuf enum AllTypeTableField
 */
export enum AllTypeTableField {
    /**
     * @generated from protobuf enum value: AllTypeTable_unknow = 0;
     */
    AllTypeTable_unknow = 0,
    /**
     * @generated from protobuf enum value: AllTypeTable_id = 1;
     */
    AllTypeTable_id = 1,
    /**
     * @generated from protobuf enum value: AllTypeTable_t_int = 2;
     */
    AllTypeTable_t_int = 2,
    /**
     * @generated from protobuf enum value: AllTypeTable_s_int = 3;
     */
    AllTypeTable_s_int = 3,
    /**
     * @generated from protobuf enum value: AllTypeTable_m_int = 4;
     */
    AllTypeTable_m_int = 4,
    /**
     * @generated from protobuf enum value: AllTypeTable_b_int = 5;
     */
    AllTypeTable_b_int = 5,
    /**
     * @generated from protobuf enum value: AllTypeTable_f32 = 6;
     */
    AllTypeTable_f32 = 6,
    /**
     * @generated from protobuf enum value: AllTypeTable_f64 = 7;
     */
    AllTypeTable_f64 = 7,
    /**
     * @generated from protobuf enum value: AllTypeTable_decimal_mysql = 8;
     */
    AllTypeTable_decimal_mysql = 8,
    /**
     * @generated from protobuf enum value: AllTypeTable_char_m = 9;
     */
    AllTypeTable_char_m = 9,
    /**
     * @generated from protobuf enum value: AllTypeTable_varchar_m = 10;
     */
    AllTypeTable_varchar_m = 10,
    /**
     * @generated from protobuf enum value: AllTypeTable_json_m = 11;
     */
    AllTypeTable_json_m = 11,
    /**
     * @generated from protobuf enum value: AllTypeTable_nvarchar_m = 12;
     */
    AllTypeTable_nvarchar_m = 12,
    /**
     * @generated from protobuf enum value: AllTypeTable_nchar_m = 13;
     */
    AllTypeTable_nchar_m = 13,
    /**
     * @generated from protobuf enum value: AllTypeTable_time_m = 14;
     */
    AllTypeTable_time_m = 14,
    /**
     * @generated from protobuf enum value: AllTypeTable_date_m = 15;
     */
    AllTypeTable_date_m = 15,
    /**
     * @generated from protobuf enum value: AllTypeTable_data_time_m = 16;
     */
    AllTypeTable_data_time_m = 16,
    /**
     * @generated from protobuf enum value: AllTypeTable_timestamp_m = 17;
     */
    AllTypeTable_timestamp_m = 17,
    /**
     * @generated from protobuf enum value: AllTypeTable_timestamp_update = 18;
     */
    AllTypeTable_timestamp_update = 18,
    /**
     * @generated from protobuf enum value: AllTypeTable_year_m = 19;
     */
    AllTypeTable_year_m = 19,
    /**
     * @generated from protobuf enum value: AllTypeTable_t_text = 20;
     */
    AllTypeTable_t_text = 20,
    /**
     * @generated from protobuf enum value: AllTypeTable_m_text = 21;
     */
    AllTypeTable_m_text = 21,
    /**
     * @generated from protobuf enum value: AllTypeTable_text_m = 22;
     */
    AllTypeTable_text_m = 22,
    /**
     * @generated from protobuf enum value: AllTypeTable_l_text = 23;
     */
    AllTypeTable_l_text = 23,
    /**
     * @generated from protobuf enum value: AllTypeTable_binary_m = 24;
     */
    AllTypeTable_binary_m = 24,
    /**
     * @generated from protobuf enum value: AllTypeTable_blob_m = 25;
     */
    AllTypeTable_blob_m = 25,
    /**
     * @generated from protobuf enum value: AllTypeTable_l_blob = 26;
     */
    AllTypeTable_l_blob = 26,
    /**
     * @generated from protobuf enum value: AllTypeTable_m_blob = 27;
     */
    AllTypeTable_m_blob = 27,
    /**
     * @generated from protobuf enum value: AllTypeTable_t_blob = 28;
     */
    AllTypeTable_t_blob = 28,
    /**
     * @generated from protobuf enum value: AllTypeTable_bit_m = 29;
     */
    AllTypeTable_bit_m = 29,
    /**
     * @generated from protobuf enum value: AllTypeTable_enum_m = 30;
     */
    AllTypeTable_enum_m = 30,
    /**
     * @generated from protobuf enum value: AllTypeTable_set_m = 31;
     */
    AllTypeTable_set_m = 31,
    /**
     * @generated from protobuf enum value: AllTypeTable_bool_m = 32;
     */
    AllTypeTable_bool_m = 32
}
// @generated message type with reflection information, may provide speed optimized methods
class AllTypeTable$Type extends MessageType<AllTypeTable> {
    constructor() {
        super("AllTypeTable", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "t_int", kind: "scalar", localName: "t_int", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "s_int", kind: "scalar", localName: "s_int", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "m_int", kind: "scalar", localName: "m_int", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "b_int", kind: "scalar", localName: "b_int", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "f32", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "f64", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "decimal_mysql", kind: "scalar", localName: "decimal_mysql", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "char_m", kind: "scalar", localName: "char_m", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "varchar_m", kind: "scalar", localName: "varchar_m", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "json_m", kind: "scalar", localName: "json_m", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "nvarchar_m", kind: "scalar", localName: "nvarchar_m", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "nchar_m", kind: "scalar", localName: "nchar_m", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "time_m", kind: "scalar", localName: "time_m", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "date_m", kind: "scalar", localName: "date_m", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "data_time_m", kind: "scalar", localName: "data_time_m", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "timestamp_m", kind: "scalar", localName: "timestamp_m", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "timestamp_update", kind: "scalar", localName: "timestamp_update", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "year_m", kind: "scalar", localName: "year_m", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "t_text", kind: "scalar", localName: "t_text", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "m_text", kind: "scalar", localName: "m_text", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "text_m", kind: "scalar", localName: "text_m", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "l_text", kind: "scalar", localName: "l_text", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "binary_m", kind: "scalar", localName: "binary_m", T: 12 /*ScalarType.BYTES*/ },
            { no: 25, name: "blob_m", kind: "scalar", localName: "blob_m", T: 12 /*ScalarType.BYTES*/ },
            { no: 26, name: "l_blob", kind: "scalar", localName: "l_blob", T: 12 /*ScalarType.BYTES*/ },
            { no: 27, name: "m_blob", kind: "scalar", localName: "m_blob", T: 12 /*ScalarType.BYTES*/ },
            { no: 28, name: "t_blob", kind: "scalar", localName: "t_blob", T: 12 /*ScalarType.BYTES*/ },
            { no: 29, name: "bit_m", kind: "scalar", localName: "bit_m", T: 12 /*ScalarType.BYTES*/ },
            { no: 30, name: "enum_m", kind: "scalar", localName: "enum_m", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "set_m", kind: "scalar", localName: "set_m", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "bool_m", kind: "scalar", localName: "bool_m", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AllTypeTable>): AllTypeTable {
        const message = { id: 0n, t_int: 0n, s_int: 0n, m_int: 0n, b_int: 0n, f32: 0, f64: 0, decimal_mysql: 0, char_m: "", varchar_m: "", json_m: "", nvarchar_m: "", nchar_m: "", time_m: "", date_m: "", data_time_m: "", timestamp_m: "", timestamp_update: "", year_m: "", t_text: "", m_text: "", text_m: "", l_text: "", binary_m: new Uint8Array(0), blob_m: new Uint8Array(0), l_blob: new Uint8Array(0), m_blob: new Uint8Array(0), t_blob: new Uint8Array(0), bit_m: new Uint8Array(0), enum_m: "", set_m: "", bool_m: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllTypeTable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllTypeTable): AllTypeTable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 t_int */ 2:
                    message.t_int = reader.int64().toBigInt();
                    break;
                case /* int64 s_int */ 3:
                    message.s_int = reader.int64().toBigInt();
                    break;
                case /* int64 m_int */ 4:
                    message.m_int = reader.int64().toBigInt();
                    break;
                case /* int64 b_int */ 5:
                    message.b_int = reader.int64().toBigInt();
                    break;
                case /* float f32 */ 6:
                    message.f32 = reader.float();
                    break;
                case /* double f64 */ 7:
                    message.f64 = reader.double();
                    break;
                case /* double decimal_mysql */ 8:
                    message.decimal_mysql = reader.double();
                    break;
                case /* string char_m */ 9:
                    message.char_m = reader.string();
                    break;
                case /* string varchar_m */ 10:
                    message.varchar_m = reader.string();
                    break;
                case /* string json_m */ 11:
                    message.json_m = reader.string();
                    break;
                case /* string nvarchar_m */ 12:
                    message.nvarchar_m = reader.string();
                    break;
                case /* string nchar_m */ 13:
                    message.nchar_m = reader.string();
                    break;
                case /* string time_m */ 14:
                    message.time_m = reader.string();
                    break;
                case /* string date_m */ 15:
                    message.date_m = reader.string();
                    break;
                case /* string data_time_m */ 16:
                    message.data_time_m = reader.string();
                    break;
                case /* string timestamp_m */ 17:
                    message.timestamp_m = reader.string();
                    break;
                case /* string timestamp_update */ 18:
                    message.timestamp_update = reader.string();
                    break;
                case /* string year_m */ 19:
                    message.year_m = reader.string();
                    break;
                case /* string t_text */ 20:
                    message.t_text = reader.string();
                    break;
                case /* string m_text */ 21:
                    message.m_text = reader.string();
                    break;
                case /* string text_m */ 22:
                    message.text_m = reader.string();
                    break;
                case /* string l_text */ 23:
                    message.l_text = reader.string();
                    break;
                case /* bytes binary_m */ 24:
                    message.binary_m = reader.bytes();
                    break;
                case /* bytes blob_m */ 25:
                    message.blob_m = reader.bytes();
                    break;
                case /* bytes l_blob */ 26:
                    message.l_blob = reader.bytes();
                    break;
                case /* bytes m_blob */ 27:
                    message.m_blob = reader.bytes();
                    break;
                case /* bytes t_blob */ 28:
                    message.t_blob = reader.bytes();
                    break;
                case /* bytes bit_m */ 29:
                    message.bit_m = reader.bytes();
                    break;
                case /* string enum_m */ 30:
                    message.enum_m = reader.string();
                    break;
                case /* string set_m */ 31:
                    message.set_m = reader.string();
                    break;
                case /* int64 bool_m */ 32:
                    message.bool_m = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllTypeTable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 t_int = 2; */
        if (message.t_int !== 0n)
            writer.tag(2, WireType.Varint).int64(message.t_int);
        /* int64 s_int = 3; */
        if (message.s_int !== 0n)
            writer.tag(3, WireType.Varint).int64(message.s_int);
        /* int64 m_int = 4; */
        if (message.m_int !== 0n)
            writer.tag(4, WireType.Varint).int64(message.m_int);
        /* int64 b_int = 5; */
        if (message.b_int !== 0n)
            writer.tag(5, WireType.Varint).int64(message.b_int);
        /* float f32 = 6; */
        if (message.f32 !== 0)
            writer.tag(6, WireType.Bit32).float(message.f32);
        /* double f64 = 7; */
        if (message.f64 !== 0)
            writer.tag(7, WireType.Bit64).double(message.f64);
        /* double decimal_mysql = 8; */
        if (message.decimal_mysql !== 0)
            writer.tag(8, WireType.Bit64).double(message.decimal_mysql);
        /* string char_m = 9; */
        if (message.char_m !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.char_m);
        /* string varchar_m = 10; */
        if (message.varchar_m !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.varchar_m);
        /* string json_m = 11; */
        if (message.json_m !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.json_m);
        /* string nvarchar_m = 12; */
        if (message.nvarchar_m !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.nvarchar_m);
        /* string nchar_m = 13; */
        if (message.nchar_m !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.nchar_m);
        /* string time_m = 14; */
        if (message.time_m !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.time_m);
        /* string date_m = 15; */
        if (message.date_m !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.date_m);
        /* string data_time_m = 16; */
        if (message.data_time_m !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.data_time_m);
        /* string timestamp_m = 17; */
        if (message.timestamp_m !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.timestamp_m);
        /* string timestamp_update = 18; */
        if (message.timestamp_update !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.timestamp_update);
        /* string year_m = 19; */
        if (message.year_m !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.year_m);
        /* string t_text = 20; */
        if (message.t_text !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.t_text);
        /* string m_text = 21; */
        if (message.m_text !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.m_text);
        /* string text_m = 22; */
        if (message.text_m !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.text_m);
        /* string l_text = 23; */
        if (message.l_text !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.l_text);
        /* bytes binary_m = 24; */
        if (message.binary_m.length)
            writer.tag(24, WireType.LengthDelimited).bytes(message.binary_m);
        /* bytes blob_m = 25; */
        if (message.blob_m.length)
            writer.tag(25, WireType.LengthDelimited).bytes(message.blob_m);
        /* bytes l_blob = 26; */
        if (message.l_blob.length)
            writer.tag(26, WireType.LengthDelimited).bytes(message.l_blob);
        /* bytes m_blob = 27; */
        if (message.m_blob.length)
            writer.tag(27, WireType.LengthDelimited).bytes(message.m_blob);
        /* bytes t_blob = 28; */
        if (message.t_blob.length)
            writer.tag(28, WireType.LengthDelimited).bytes(message.t_blob);
        /* bytes bit_m = 29; */
        if (message.bit_m.length)
            writer.tag(29, WireType.LengthDelimited).bytes(message.bit_m);
        /* string enum_m = 30; */
        if (message.enum_m !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.enum_m);
        /* string set_m = 31; */
        if (message.set_m !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.set_m);
        /* int64 bool_m = 32; */
        if (message.bool_m !== 0n)
            writer.tag(32, WireType.Varint).int64(message.bool_m);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllTypeTable
 */
export const AllTypeTable = new AllTypeTable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllTypeTableId$Type extends MessageType<AllTypeTableId> {
    constructor() {
        super("AllTypeTableId", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AllTypeTableId>): AllTypeTableId {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllTypeTableId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllTypeTableId): AllTypeTableId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllTypeTableId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllTypeTableId
 */
export const AllTypeTableId = new AllTypeTableId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAllTypeTableReq$Type extends MessageType<UpdateAllTypeTableReq> {
    constructor() {
        super("UpdateAllTypeTableReq", [
            { no: 1, name: "all_type_table", kind: "message", localName: "all_type_table", T: () => AllTypeTable },
            { no: 2, name: "update_mask", kind: "scalar", localName: "update_mask", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAllTypeTableReq>): UpdateAllTypeTableReq {
        const message = { update_mask: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAllTypeTableReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAllTypeTableReq): UpdateAllTypeTableReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AllTypeTable all_type_table */ 1:
                    message.all_type_table = AllTypeTable.internalBinaryRead(reader, reader.uint32(), options, message.all_type_table);
                    break;
                case /* repeated string update_mask */ 2:
                    message.update_mask.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAllTypeTableReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AllTypeTable all_type_table = 1; */
        if (message.all_type_table)
            AllTypeTable.internalBinaryWrite(message.all_type_table, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string update_mask = 2; */
        for (let i = 0; i < message.update_mask.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.update_mask[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateAllTypeTableReq
 */
export const UpdateAllTypeTableReq = new UpdateAllTypeTableReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAllTypeTablesReq$Type extends MessageType<ListAllTypeTablesReq> {
    constructor() {
        super("ListAllTypeTablesReq", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", localName: "page_size", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "order_by_field", kind: "enum", localName: "order_by_field", T: () => ["AllTypeTableField", AllTypeTableField] },
            { no: 4, name: "order_by_desc", kind: "scalar", localName: "order_by_desc", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AllTypeTableFilter }
        ]);
    }
    create(value?: PartialMessage<ListAllTypeTablesReq>): ListAllTypeTablesReq {
        const message = { page: 0, page_size: 0, order_by_field: 0, order_by_desc: false, filters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAllTypeTablesReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAllTypeTablesReq): ListAllTypeTablesReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 page_size */ 2:
                    message.page_size = reader.int32();
                    break;
                case /* AllTypeTableField order_by_field */ 3:
                    message.order_by_field = reader.int32();
                    break;
                case /* bool order_by_desc */ 4:
                    message.order_by_desc = reader.bool();
                    break;
                case /* repeated AllTypeTableFilter filters */ 5:
                    message.filters.push(AllTypeTableFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAllTypeTablesReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 page_size = 2; */
        if (message.page_size !== 0)
            writer.tag(2, WireType.Varint).int32(message.page_size);
        /* AllTypeTableField order_by_field = 3; */
        if (message.order_by_field !== 0)
            writer.tag(3, WireType.Varint).int32(message.order_by_field);
        /* bool order_by_desc = 4; */
        if (message.order_by_desc !== false)
            writer.tag(4, WireType.Varint).bool(message.order_by_desc);
        /* repeated AllTypeTableFilter filters = 5; */
        for (let i = 0; i < message.filters.length; i++)
            AllTypeTableFilter.internalBinaryWrite(message.filters[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAllTypeTablesReq
 */
export const ListAllTypeTablesReq = new ListAllTypeTablesReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllTypeTableFilter$Type extends MessageType<AllTypeTableFilter> {
    constructor() {
        super("AllTypeTableFilter", [
            { no: 1, name: "field", kind: "enum", T: () => ["AllTypeTableField", AllTypeTableField] },
            { no: 2, name: "op", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AllTypeTableFilter>): AllTypeTableFilter {
        const message = { field: 0, op: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllTypeTableFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllTypeTableFilter): AllTypeTableFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AllTypeTableField field */ 1:
                    message.field = reader.int32();
                    break;
                case /* string op */ 2:
                    message.op = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllTypeTableFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AllTypeTableField field = 1; */
        if (message.field !== 0)
            writer.tag(1, WireType.Varint).int32(message.field);
        /* string op = 2; */
        if (message.op !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.op);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllTypeTableFilter
 */
export const AllTypeTableFilter = new AllTypeTableFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAllTypeTablesResp$Type extends MessageType<ListAllTypeTablesResp> {
    constructor() {
        super("ListAllTypeTablesResp", [
            { no: 1, name: "all_type_tables", kind: "message", localName: "all_type_tables", repeat: 1 /*RepeatType.PACKED*/, T: () => AllTypeTable },
            { no: 2, name: "total_count", kind: "scalar", localName: "total_count", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_count", kind: "scalar", localName: "page_count", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListAllTypeTablesResp>): ListAllTypeTablesResp {
        const message = { all_type_tables: [], total_count: 0, page_count: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAllTypeTablesResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAllTypeTablesResp): ListAllTypeTablesResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated AllTypeTable all_type_tables */ 1:
                    message.all_type_tables.push(AllTypeTable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 total_count */ 2:
                    message.total_count = reader.int32();
                    break;
                case /* int32 page_count */ 3:
                    message.page_count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAllTypeTablesResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated AllTypeTable all_type_tables = 1; */
        for (let i = 0; i < message.all_type_tables.length; i++)
            AllTypeTable.internalBinaryWrite(message.all_type_tables[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 total_count = 2; */
        if (message.total_count !== 0)
            writer.tag(2, WireType.Varint).int32(message.total_count);
        /* int32 page_count = 3; */
        if (message.page_count !== 0)
            writer.tag(3, WireType.Varint).int32(message.page_count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAllTypeTablesResp
 */
export const ListAllTypeTablesResp = new ListAllTypeTablesResp$Type();
/**
 * @generated ServiceType for protobuf service AllTypeTableService
 */
export const AllTypeTableService = new ServiceType("AllTypeTableService", [
    { name: "CreateAllTypeTable", options: {}, I: AllTypeTable, O: AllTypeTable },
    { name: "DeleteAllTypeTable", options: {}, I: AllTypeTableId, O: Empty },
    { name: "UpdateAllTypeTable", options: {}, I: UpdateAllTypeTableReq, O: AllTypeTable },
    { name: "GetAllTypeTable", options: {}, I: AllTypeTableId, O: AllTypeTable },
    { name: "ListAllTypeTables", options: {}, I: ListAllTypeTablesReq, O: ListAllTypeTablesResp }
]);
