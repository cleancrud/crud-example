// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name
// @generated from protobuf file "proto/user.api.proto" (package "example", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user.api";
import type { ListUsersResp } from "./user.api";
import type { ListUsersReq } from "./user.api";
import type { UpdateUserReq } from "./user.api";
import type { Empty } from "../google/protobuf/empty";
import type { UserId } from "./user.api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { User } from "./user.api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service example.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: CreateUser(example.User) returns (example.User);
     */
    createUser(input: User, options?: RpcOptions): UnaryCall<User, User>;
    /**
     * @generated from protobuf rpc: DeleteUser(example.UserId) returns (google.protobuf.Empty);
     */
    deleteUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, Empty>;
    /**
     * @generated from protobuf rpc: UpdateUser(example.UpdateUserReq) returns (example.User);
     */
    updateUser(input: UpdateUserReq, options?: RpcOptions): UnaryCall<UpdateUserReq, User>;
    /**
     * @generated from protobuf rpc: GetUser(example.UserId) returns (example.User);
     */
    getUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, User>;
    /**
     * @generated from protobuf rpc: ListUsers(example.ListUsersReq) returns (example.ListUsersResp);
     */
    listUsers(input: ListUsersReq, options?: RpcOptions): UnaryCall<ListUsersReq, ListUsersResp>;
}
/**
 * @generated from protobuf service example.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateUser(example.User) returns (example.User);
     */
    createUser(input: User, options?: RpcOptions): UnaryCall<User, User> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, User>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(example.UserId) returns (google.protobuf.Empty);
     */
    deleteUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(example.UpdateUserReq) returns (example.User);
     */
    updateUser(input: UpdateUserReq, options?: RpcOptions): UnaryCall<UpdateUserReq, User> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserReq, User>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser(example.UserId) returns (example.User);
     */
    getUser(input: UserId, options?: RpcOptions): UnaryCall<UserId, User> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, User>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUsers(example.ListUsersReq) returns (example.ListUsersResp);
     */
    listUsers(input: ListUsersReq, options?: RpcOptions): UnaryCall<ListUsersReq, ListUsersResp> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsersReq, ListUsersResp>("unary", this._transport, method, opt, input);
    }
}
