// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: proto/alltypetable.api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllTypeTableField int32

const (
	AllTypeTableField_AllTypeTable_unknow           AllTypeTableField = 0
	AllTypeTableField_AllTypeTable_id               AllTypeTableField = 1
	AllTypeTableField_AllTypeTable_t_int            AllTypeTableField = 2
	AllTypeTableField_AllTypeTable_s_int            AllTypeTableField = 3
	AllTypeTableField_AllTypeTable_m_int            AllTypeTableField = 4
	AllTypeTableField_AllTypeTable_b_int            AllTypeTableField = 5
	AllTypeTableField_AllTypeTable_f32              AllTypeTableField = 6
	AllTypeTableField_AllTypeTable_f64              AllTypeTableField = 7
	AllTypeTableField_AllTypeTable_decimal_mysql    AllTypeTableField = 8
	AllTypeTableField_AllTypeTable_char_m           AllTypeTableField = 9
	AllTypeTableField_AllTypeTable_varchar_m        AllTypeTableField = 10
	AllTypeTableField_AllTypeTable_json_m           AllTypeTableField = 11
	AllTypeTableField_AllTypeTable_nvarchar_m       AllTypeTableField = 12
	AllTypeTableField_AllTypeTable_nchar_m          AllTypeTableField = 13
	AllTypeTableField_AllTypeTable_time_m           AllTypeTableField = 14
	AllTypeTableField_AllTypeTable_date_m           AllTypeTableField = 15
	AllTypeTableField_AllTypeTable_data_time_m      AllTypeTableField = 16
	AllTypeTableField_AllTypeTable_timestamp_m      AllTypeTableField = 17
	AllTypeTableField_AllTypeTable_timestamp_update AllTypeTableField = 18
	AllTypeTableField_AllTypeTable_year_m           AllTypeTableField = 19
	AllTypeTableField_AllTypeTable_t_text           AllTypeTableField = 20
	AllTypeTableField_AllTypeTable_m_text           AllTypeTableField = 21
	AllTypeTableField_AllTypeTable_text_m           AllTypeTableField = 22
	AllTypeTableField_AllTypeTable_l_text           AllTypeTableField = 23
	AllTypeTableField_AllTypeTable_binary_m         AllTypeTableField = 24
	AllTypeTableField_AllTypeTable_blob_m           AllTypeTableField = 25
	AllTypeTableField_AllTypeTable_l_blob           AllTypeTableField = 26
	AllTypeTableField_AllTypeTable_m_blob           AllTypeTableField = 27
	AllTypeTableField_AllTypeTable_t_blob           AllTypeTableField = 28
	AllTypeTableField_AllTypeTable_bit_m            AllTypeTableField = 29
	AllTypeTableField_AllTypeTable_enum_m           AllTypeTableField = 30
	AllTypeTableField_AllTypeTable_set_m            AllTypeTableField = 31
	AllTypeTableField_AllTypeTable_bool_m           AllTypeTableField = 32
)

// Enum value maps for AllTypeTableField.
var (
	AllTypeTableField_name = map[int32]string{
		0:  "AllTypeTable_unknow",
		1:  "AllTypeTable_id",
		2:  "AllTypeTable_t_int",
		3:  "AllTypeTable_s_int",
		4:  "AllTypeTable_m_int",
		5:  "AllTypeTable_b_int",
		6:  "AllTypeTable_f32",
		7:  "AllTypeTable_f64",
		8:  "AllTypeTable_decimal_mysql",
		9:  "AllTypeTable_char_m",
		10: "AllTypeTable_varchar_m",
		11: "AllTypeTable_json_m",
		12: "AllTypeTable_nvarchar_m",
		13: "AllTypeTable_nchar_m",
		14: "AllTypeTable_time_m",
		15: "AllTypeTable_date_m",
		16: "AllTypeTable_data_time_m",
		17: "AllTypeTable_timestamp_m",
		18: "AllTypeTable_timestamp_update",
		19: "AllTypeTable_year_m",
		20: "AllTypeTable_t_text",
		21: "AllTypeTable_m_text",
		22: "AllTypeTable_text_m",
		23: "AllTypeTable_l_text",
		24: "AllTypeTable_binary_m",
		25: "AllTypeTable_blob_m",
		26: "AllTypeTable_l_blob",
		27: "AllTypeTable_m_blob",
		28: "AllTypeTable_t_blob",
		29: "AllTypeTable_bit_m",
		30: "AllTypeTable_enum_m",
		31: "AllTypeTable_set_m",
		32: "AllTypeTable_bool_m",
	}
	AllTypeTableField_value = map[string]int32{
		"AllTypeTable_unknow":           0,
		"AllTypeTable_id":               1,
		"AllTypeTable_t_int":            2,
		"AllTypeTable_s_int":            3,
		"AllTypeTable_m_int":            4,
		"AllTypeTable_b_int":            5,
		"AllTypeTable_f32":              6,
		"AllTypeTable_f64":              7,
		"AllTypeTable_decimal_mysql":    8,
		"AllTypeTable_char_m":           9,
		"AllTypeTable_varchar_m":        10,
		"AllTypeTable_json_m":           11,
		"AllTypeTable_nvarchar_m":       12,
		"AllTypeTable_nchar_m":          13,
		"AllTypeTable_time_m":           14,
		"AllTypeTable_date_m":           15,
		"AllTypeTable_data_time_m":      16,
		"AllTypeTable_timestamp_m":      17,
		"AllTypeTable_timestamp_update": 18,
		"AllTypeTable_year_m":           19,
		"AllTypeTable_t_text":           20,
		"AllTypeTable_m_text":           21,
		"AllTypeTable_text_m":           22,
		"AllTypeTable_l_text":           23,
		"AllTypeTable_binary_m":         24,
		"AllTypeTable_blob_m":           25,
		"AllTypeTable_l_blob":           26,
		"AllTypeTable_m_blob":           27,
		"AllTypeTable_t_blob":           28,
		"AllTypeTable_bit_m":            29,
		"AllTypeTable_enum_m":           30,
		"AllTypeTable_set_m":            31,
		"AllTypeTable_bool_m":           32,
	}
)

func (x AllTypeTableField) Enum() *AllTypeTableField {
	p := new(AllTypeTableField)
	*p = x
	return p
}

func (x AllTypeTableField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTypeTableField) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_alltypetable_api_proto_enumTypes[0].Descriptor()
}

func (AllTypeTableField) Type() protoreflect.EnumType {
	return &file_proto_alltypetable_api_proto_enumTypes[0]
}

func (x AllTypeTableField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTypeTableField.Descriptor instead.
func (AllTypeTableField) EnumDescriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{0}
}

type AllTypeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自增id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // @gotags: json:"id"
	// 小小整型
	TInt int64 `protobuf:"varint,2,opt,name=t_int,json=tInt,proto3" json:"t_int,omitempty"` // @gotags: json:"t_int"
	// 小整数
	SInt int64 `protobuf:"varint,3,opt,name=s_int,json=sInt,proto3" json:"s_int,omitempty"` // @gotags: json:"s_int"
	// 中整数
	MInt int64 `protobuf:"varint,4,opt,name=m_int,json=mInt,proto3" json:"m_int,omitempty"` // @gotags: json:"m_int"
	// 大整数
	BInt int64 `protobuf:"varint,5,opt,name=b_int,json=bInt,proto3" json:"b_int,omitempty"` // @gotags: json:"b_int"
	// 小浮点
	F32 float32 `protobuf:"fixed32,6,opt,name=f32,proto3" json:"f32,omitempty"` // @gotags: json:"f32"
	// 大浮点
	F64 float64 `protobuf:"fixed64,7,opt,name=f64,proto3" json:"f64,omitempty"` // @gotags: json:"f64"
	DecimalMysql float64 `protobuf:"fixed64,8,opt,name=decimal_mysql,json=decimalMysql,proto3" json:"decimal_mysql,omitempty"` // @gotags: json:"decimal_mysql"
	CharM string `protobuf:"bytes,9,opt,name=char_m,json=charM,proto3" json:"char_m,omitempty"` // @gotags: json:"char_m"
	VarcharM string `protobuf:"bytes,10,opt,name=varchar_m,json=varcharM,proto3" json:"varchar_m,omitempty"` // @gotags: json:"varchar_m"
	JsonM string `protobuf:"bytes,11,opt,name=json_m,json=jsonM,proto3" json:"json_m,omitempty"` // @gotags: json:"json_m"
	NvarcharM string `protobuf:"bytes,12,opt,name=nvarchar_m,json=nvarcharM,proto3" json:"nvarchar_m,omitempty"` // @gotags: json:"nvarchar_m"
	NcharM string `protobuf:"bytes,13,opt,name=nchar_m,json=ncharM,proto3" json:"nchar_m,omitempty"` // @gotags: json:"nchar_m"
	TimeM string `protobuf:"bytes,14,opt,name=time_m,json=timeM,proto3" json:"time_m,omitempty"` // @gotags: json:"time_m"
	DateM string `protobuf:"bytes,15,opt,name=date_m,json=dateM,proto3" json:"date_m,omitempty"` // @gotags: json:"date_m"
	DataTimeM string `protobuf:"bytes,16,opt,name=data_time_m,json=dataTimeM,proto3" json:"data_time_m,omitempty"` // @gotags: json:"data_time_m"
	// 创建时间
	TimestampM string `protobuf:"bytes,17,opt,name=timestamp_m,json=timestampM,proto3" json:"timestamp_m,omitempty"` // @gotags: json:"timestamp_m"
	// 更新时间
	TimestampUpdate string `protobuf:"bytes,18,opt,name=timestamp_update,json=timestampUpdate,proto3" json:"timestamp_update,omitempty"` // @gotags: json:"timestamp_update"
	// 年
	YearM string `protobuf:"bytes,19,opt,name=year_m,json=yearM,proto3" json:"year_m,omitempty"` // @gotags: json:"year_m"
	TText string `protobuf:"bytes,20,opt,name=t_text,json=tText,proto3" json:"t_text,omitempty"` // @gotags: json:"t_text"
	MText string `protobuf:"bytes,21,opt,name=m_text,json=mText,proto3" json:"m_text,omitempty"` // @gotags: json:"m_text"
	TextM string `protobuf:"bytes,22,opt,name=text_m,json=textM,proto3" json:"text_m,omitempty"` // @gotags: json:"text_m"
	LText string `protobuf:"bytes,23,opt,name=l_text,json=lText,proto3" json:"l_text,omitempty"` // @gotags: json:"l_text"
	BinaryM []byte `protobuf:"bytes,24,opt,name=binary_m,json=binaryM,proto3" json:"binary_m,omitempty"` // @gotags: json:"binary_m"
	BlobM []byte `protobuf:"bytes,25,opt,name=blob_m,json=blobM,proto3" json:"blob_m,omitempty"` // @gotags: json:"blob_m"
	LBlob []byte `protobuf:"bytes,26,opt,name=l_blob,json=lBlob,proto3" json:"l_blob,omitempty"` // @gotags: json:"l_blob"
	MBlob []byte `protobuf:"bytes,27,opt,name=m_blob,json=mBlob,proto3" json:"m_blob,omitempty"` // @gotags: json:"m_blob"
	TBlob []byte `protobuf:"bytes,28,opt,name=t_blob,json=tBlob,proto3" json:"t_blob,omitempty"` // @gotags: json:"t_blob"
	BitM []byte `protobuf:"bytes,29,opt,name=bit_m,json=bitM,proto3" json:"bit_m,omitempty"` // @gotags: json:"bit_m"
	EnumM string `protobuf:"bytes,30,opt,name=enum_m,json=enumM,proto3" json:"enum_m,omitempty"` // @gotags: json:"enum_m"
	SetM string `protobuf:"bytes,31,opt,name=set_m,json=setM,proto3" json:"set_m,omitempty"` // @gotags: json:"set_m"
	BoolM int64 `protobuf:"varint,32,opt,name=bool_m,json=boolM,proto3" json:"bool_m,omitempty"` // @gotags: json:"bool_m"
}

func (x *AllTypeTable) Reset() {
	*x = AllTypeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTypeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTypeTable) ProtoMessage() {}

func (x *AllTypeTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTypeTable.ProtoReflect.Descriptor instead.
func (*AllTypeTable) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{0}
}

func (x *AllTypeTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AllTypeTable) GetTInt() int64 {
	if x != nil {
		return x.TInt
	}
	return 0
}

func (x *AllTypeTable) GetSInt() int64 {
	if x != nil {
		return x.SInt
	}
	return 0
}

func (x *AllTypeTable) GetMInt() int64 {
	if x != nil {
		return x.MInt
	}
	return 0
}

func (x *AllTypeTable) GetBInt() int64 {
	if x != nil {
		return x.BInt
	}
	return 0
}

func (x *AllTypeTable) GetF32() float32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *AllTypeTable) GetF64() float64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *AllTypeTable) GetDecimalMysql() float64 {
	if x != nil {
		return x.DecimalMysql
	}
	return 0
}

func (x *AllTypeTable) GetCharM() string {
	if x != nil {
		return x.CharM
	}
	return ""
}

func (x *AllTypeTable) GetVarcharM() string {
	if x != nil {
		return x.VarcharM
	}
	return ""
}

func (x *AllTypeTable) GetJsonM() string {
	if x != nil {
		return x.JsonM
	}
	return ""
}

func (x *AllTypeTable) GetNvarcharM() string {
	if x != nil {
		return x.NvarcharM
	}
	return ""
}

func (x *AllTypeTable) GetNcharM() string {
	if x != nil {
		return x.NcharM
	}
	return ""
}

func (x *AllTypeTable) GetTimeM() string {
	if x != nil {
		return x.TimeM
	}
	return ""
}

func (x *AllTypeTable) GetDateM() string {
	if x != nil {
		return x.DateM
	}
	return ""
}

func (x *AllTypeTable) GetDataTimeM() string {
	if x != nil {
		return x.DataTimeM
	}
	return ""
}

func (x *AllTypeTable) GetTimestampM() string {
	if x != nil {
		return x.TimestampM
	}
	return ""
}

func (x *AllTypeTable) GetTimestampUpdate() string {
	if x != nil {
		return x.TimestampUpdate
	}
	return ""
}

func (x *AllTypeTable) GetYearM() string {
	if x != nil {
		return x.YearM
	}
	return ""
}

func (x *AllTypeTable) GetTText() string {
	if x != nil {
		return x.TText
	}
	return ""
}

func (x *AllTypeTable) GetMText() string {
	if x != nil {
		return x.MText
	}
	return ""
}

func (x *AllTypeTable) GetTextM() string {
	if x != nil {
		return x.TextM
	}
	return ""
}

func (x *AllTypeTable) GetLText() string {
	if x != nil {
		return x.LText
	}
	return ""
}

func (x *AllTypeTable) GetBinaryM() []byte {
	if x != nil {
		return x.BinaryM
	}
	return nil
}

func (x *AllTypeTable) GetBlobM() []byte {
	if x != nil {
		return x.BlobM
	}
	return nil
}

func (x *AllTypeTable) GetLBlob() []byte {
	if x != nil {
		return x.LBlob
	}
	return nil
}

func (x *AllTypeTable) GetMBlob() []byte {
	if x != nil {
		return x.MBlob
	}
	return nil
}

func (x *AllTypeTable) GetTBlob() []byte {
	if x != nil {
		return x.TBlob
	}
	return nil
}

func (x *AllTypeTable) GetBitM() []byte {
	if x != nil {
		return x.BitM
	}
	return nil
}

func (x *AllTypeTable) GetEnumM() string {
	if x != nil {
		return x.EnumM
	}
	return ""
}

func (x *AllTypeTable) GetSetM() string {
	if x != nil {
		return x.SetM
	}
	return ""
}

func (x *AllTypeTable) GetBoolM() int64 {
	if x != nil {
		return x.BoolM
	}
	return 0
}

type AllTypeTableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // @gotags: form:"id"
}

func (x *AllTypeTableId) Reset() {
	*x = AllTypeTableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTypeTableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTypeTableId) ProtoMessage() {}

func (x *AllTypeTableId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTypeTableId.ProtoReflect.Descriptor instead.
func (*AllTypeTableId) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{1}
}

func (x *AllTypeTableId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateAllTypeTableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllTypeTable *AllTypeTable `protobuf:"bytes,1,opt,name=all_type_table,json=allTypeTable,proto3" json:"all_type_table,omitempty"`
	UpdateMask   []string      `protobuf:"bytes,2,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateAllTypeTableReq) Reset() {
	*x = UpdateAllTypeTableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllTypeTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllTypeTableReq) ProtoMessage() {}

func (x *UpdateAllTypeTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllTypeTableReq.ProtoReflect.Descriptor instead.
func (*UpdateAllTypeTableReq) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAllTypeTableReq) GetAllTypeTable() *AllTypeTable {
	if x != nil {
		return x.AllTypeTable
	}
	return nil
}

func (x *UpdateAllTypeTableReq) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ListAllTypeTablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of page
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // @gotags: form:"page"
	// default 20
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // @gotags: form:"page_size"
	// order by field
	OrderByField AllTypeTableField `protobuf:"varint,3,opt,name=order_by_field,json=orderByField,proto3,enum=AllTypeTableField" json:"order_by_field,omitempty"` // @gotags: form:"order_by_field"
	// ASC DESC
	OrderByDesc bool `protobuf:"varint,4,opt,name=order_by_desc,json=orderByDesc,proto3" json:"order_by_desc,omitempty"` //@gotags: form:"order_by_desc"
	// filter
	Filters []*AllTypeTableFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"` //@gotags: form:"filters"
}

func (x *ListAllTypeTablesReq) Reset() {
	*x = ListAllTypeTablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllTypeTablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTypeTablesReq) ProtoMessage() {}

func (x *ListAllTypeTablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTypeTablesReq.ProtoReflect.Descriptor instead.
func (*ListAllTypeTablesReq) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllTypeTablesReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAllTypeTablesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAllTypeTablesReq) GetOrderByField() AllTypeTableField {
	if x != nil {
		return x.OrderByField
	}
	return AllTypeTableField_AllTypeTable_unknow
}

func (x *ListAllTypeTablesReq) GetOrderByDesc() bool {
	if x != nil {
		return x.OrderByDesc
	}
	return false
}

func (x *ListAllTypeTablesReq) GetFilters() []*AllTypeTableFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type AllTypeTableFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field AllTypeTableField `protobuf:"varint,1,opt,name=field,proto3,enum=AllTypeTableField" json:"field,omitempty"`
	Op    string            `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Value string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AllTypeTableFilter) Reset() {
	*x = AllTypeTableFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTypeTableFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTypeTableFilter) ProtoMessage() {}

func (x *AllTypeTableFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTypeTableFilter.ProtoReflect.Descriptor instead.
func (*AllTypeTableFilter) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{4}
}

func (x *AllTypeTableFilter) GetField() AllTypeTableField {
	if x != nil {
		return x.Field
	}
	return AllTypeTableField_AllTypeTable_unknow
}

func (x *AllTypeTableFilter) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *AllTypeTableFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListAllTypeTablesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllTypeTables []*AllTypeTable `protobuf:"bytes,1,rep,name=all_type_tables,json=allTypeTables,proto3" json:"all_type_tables,omitempty"` // @gotags: json:"all_type_tables"
	TotalCount    int32           `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // @gotags: json:"total_count"
	PageCount     int32           `protobuf:"varint,3,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`              // @gotags: json:"page_count"
}

func (x *ListAllTypeTablesResp) Reset() {
	*x = ListAllTypeTablesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_alltypetable_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllTypeTablesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTypeTablesResp) ProtoMessage() {}

func (x *ListAllTypeTablesResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_alltypetable_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTypeTablesResp.ProtoReflect.Descriptor instead.
func (*ListAllTypeTablesResp) Descriptor() ([]byte, []int) {
	return file_proto_alltypetable_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListAllTypeTablesResp) GetAllTypeTables() []*AllTypeTable {
	if x != nil {
		return x.AllTypeTables
	}
	return nil
}

func (x *ListAllTypeTablesResp) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListAllTypeTablesResp) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

var File_proto_alltypetable_api_proto protoreflect.FileDescriptor

var file_proto_alltypetable_api_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x06, 0x0a, 0x0c,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x49, 0x6e,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x49, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x49, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x49, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66,
	0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x66, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x4d,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x4d, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x73, 0x6f, 0x6e, 0x4d, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x76, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x4d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x63, 0x68, 0x61, 0x72, 0x4d, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78,
	0x74, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6d, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x6c,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x42, 0x6c,
	0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x13, 0x0a, 0x05, 0x62, 0x69, 0x74, 0x5f, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x69, 0x74, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x74,
	0x4d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x22, 0x20, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x64, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xe1, 0x06, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x33, 0x32, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x36, 0x34, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x10, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x6d, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d,
	0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x10, 0x0f, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x12, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x5f, 0x6d, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x14, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x10,
	0x16, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x6d, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6d, 0x10, 0x19, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x10, 0x1b,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x6d, 0x10,
	0x1d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x10, 0x20, 0x32, 0xbc, 0x02, 0x0a, 0x13,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0d, 0x2e, 0x41, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0d, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0f, 0x2e,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_alltypetable_api_proto_rawDescOnce sync.Once
	file_proto_alltypetable_api_proto_rawDescData = file_proto_alltypetable_api_proto_rawDesc
)

func file_proto_alltypetable_api_proto_rawDescGZIP() []byte {
	file_proto_alltypetable_api_proto_rawDescOnce.Do(func() {
		file_proto_alltypetable_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_alltypetable_api_proto_rawDescData)
	})
	return file_proto_alltypetable_api_proto_rawDescData
}

var file_proto_alltypetable_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_alltypetable_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_alltypetable_api_proto_goTypes = []interface{}{
	(AllTypeTableField)(0),        // 0: AllTypeTableField
	(*AllTypeTable)(nil),          // 1: AllTypeTable
	(*AllTypeTableId)(nil),        // 2: AllTypeTableId
	(*UpdateAllTypeTableReq)(nil), // 3: UpdateAllTypeTableReq
	(*ListAllTypeTablesReq)(nil),  // 4: ListAllTypeTablesReq
	(*AllTypeTableFilter)(nil),    // 5: AllTypeTableFilter
	(*ListAllTypeTablesResp)(nil), // 6: ListAllTypeTablesResp
	(*emptypb.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_proto_alltypetable_api_proto_depIdxs = []int32{
	1,  // 0: UpdateAllTypeTableReq.all_type_table:type_name -> AllTypeTable
	0,  // 1: ListAllTypeTablesReq.order_by_field:type_name -> AllTypeTableField
	5,  // 2: ListAllTypeTablesReq.filters:type_name -> AllTypeTableFilter
	0,  // 3: AllTypeTableFilter.field:type_name -> AllTypeTableField
	1,  // 4: ListAllTypeTablesResp.all_type_tables:type_name -> AllTypeTable
	1,  // 5: AllTypeTableService.CreateAllTypeTable:input_type -> AllTypeTable
	2,  // 6: AllTypeTableService.DeleteAllTypeTable:input_type -> AllTypeTableId
	3,  // 7: AllTypeTableService.UpdateAllTypeTable:input_type -> UpdateAllTypeTableReq
	2,  // 8: AllTypeTableService.GetAllTypeTable:input_type -> AllTypeTableId
	4,  // 9: AllTypeTableService.ListAllTypeTables:input_type -> ListAllTypeTablesReq
	1,  // 10: AllTypeTableService.CreateAllTypeTable:output_type -> AllTypeTable
	7,  // 11: AllTypeTableService.DeleteAllTypeTable:output_type -> google.protobuf.Empty
	1,  // 12: AllTypeTableService.UpdateAllTypeTable:output_type -> AllTypeTable
	1,  // 13: AllTypeTableService.GetAllTypeTable:output_type -> AllTypeTable
	6,  // 14: AllTypeTableService.ListAllTypeTables:output_type -> ListAllTypeTablesResp
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_alltypetable_api_proto_init() }
func file_proto_alltypetable_api_proto_init() {
	if File_proto_alltypetable_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_alltypetable_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTypeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_alltypetable_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTypeTableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_alltypetable_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllTypeTableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_alltypetable_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllTypeTablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_alltypetable_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTypeTableFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_alltypetable_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllTypeTablesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_alltypetable_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_alltypetable_api_proto_goTypes,
		DependencyIndexes: file_proto_alltypetable_api_proto_depIdxs,
		EnumInfos:         file_proto_alltypetable_api_proto_enumTypes,
		MessageInfos:      file_proto_alltypetable_api_proto_msgTypes,
	}.Build()
	File_proto_alltypetable_api_proto = out.File
	file_proto_alltypetable_api_proto_rawDesc = nil
	file_proto_alltypetable_api_proto_goTypes = nil
	file_proto_alltypetable_api_proto_depIdxs = nil
}
